#!/bin/bash

################################################################################
### Configure System-Wide Aliases
################################################################################

# See https://hub.github.com/hub-sync.1.html
function tellus-sync() {
  for dir in $HOME/Documents/Projects/tellus*; do
    if [[ "$dir" =~ tellus-core ]]; then
      : # No-op
    else
      echo "hub sync on $dir"
      ( cd $dir && hub sync )
    fi
  done

  BACKEND_DIR="$HOME/Documents/Projects/zilly-backend"
  echo "hub sync on $BACKEND_DIR"
  ( cd $BACKEND_DIR && hub sync )
}

alias plistbuddy="/usr/libexec/PlistBuddy"

function s() {
  PARAM=$1
	if [[ $PARAM = "all" || $PARAM = "a" ]]; then
		tellus-sync
    echo "hub sync on fastlane/fastlane"
    (
      cd $HOME/Documents/Projects/fastlane && hs
    )
	else
    echo "hub sync on $PARAM"
    ( cd ~/Documents/Projects/$PARAM && hub sync )
	fi
}

# Opens a Sourcetree window using the given path, if needed.
# Example: `sourcetree .` opens a new Sourcetree window for the current directory
#          or focuses on the open one if there's one open already.
function sourcetree() {
  open -a Sourcetree "$1"
}

alias st=sourcetree

function doit() {
  sourcetree "$1"
  txt "$1"
}

function txt() {
  # Sublime Text
  # "/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl" "$1"
  # VS Code
  open -a "Visual Studio Code.app" $1
}

# This command kills and relaunches several audio and bluetooth related processes,
# fixing issues bluetooth headsets malfunctioning.
function killaudio() {
  sudo kill `pgrep coreaudiod`
  sudo kill `pgrep bluetoothd`
  sudo kextunload -b com.apple.iokit.BroadcomBluetoothHostControllerUSBTransport
  sudo kextload -b com.apple.iokit.BroadcomBluetoothHostControllerUSBTransport
  sudo kextunload -b com.apple.iokit.BroadcomBluetoothHostControllerUSBTransport
}

# Usage:
# update-target --base-org:rogerluan --repo-name:dotfiles --target:someorg:perhapsabranch
function update-target() {
  TARGET_ARGUMENT="${3##--target:}" # e.g. 'someoneelse:anotherbranch' or 'revolter/fix-slack-head-branch' or 'rogerluan-fix-important-feature'

  if [[ $TARGET_ARGUMENT =~ : ]]; then
    source $DOTFILES_DIR/Utilities/update_fork.sh "$@"
  else
    source $DOTFILES_DIR/Utilities/update_branch.sh "$@"
  fi
}

# gpg-agent eventually dies, randomly, failing to sign commits. This command kills existing gpg-agent process and relaunches it.
alias killgpg="pkill gpg-agent && gpg-agent --daemon"

# Opens the Google Play Store console (beta view), ready to publish a new version of the app
alias playstore="open -a safari https://play.google.com/console/u/1/developers/6280656057399977520/app-list"

# Generates a UUID
alias uuid=uuidgen

# Alias to hub_patched_sync
alias hs=hub_patched_sync

# Attempts to clean up local branches once they don't exist in remote anymore
function hub_patched_sync() {
  hub_sync_results=$(hub sync 2>&1)
  swift $DOTFILES_DIR/Utilities/delete_local_branches_from_hub_sync.swift "$hub_sync_results"
}

alias python=python3

# Prettifies the input json file into an output file
function json() {
  SRC="$1"
  SRC_FILENAME="${SRC%%.*}" # Removes the .json extension
  DST="$SRC_FILENAME-prettier.json"
  cat $SRC | python -mjson.tool > $DST
  echo "Prettified JSON and saved it at '$DST'"
}

# Generates a git changelog from the current directory from the parameter's tag to current HEAD.
function changelog() {
  git log --pretty='* %s' "$1"...HEAD | grep "* #"
}

# Generates a git changelog from the current directory from the parameter's tag to current HEAD.
function changelog-md() {
  CHANGELOG=$(changelog $1)
  # OPEN_PRS=$(gh pr list)

  sed -E 's/#(\d*)/[#$1](https:\/\/github.com\/zillyinc\/tellus-ios\/pull\/$1)/gm' <<< $CHANGELOG

  # sed -Ei "s/^([[:blank:]]*)(pod 'Reveal-SDK')/\1# \2/" Podfile
}

alias cl=changelog
alias clmd=changelog-md

alias path="tr ':' '\n' <<< \"$PATH\""

function sha256() {
  set +H
  echo -n "$1" | openssl dgst -sha256
  set -h
}

function md5() {
  set +H
  echo -n "$1" | openssl dgst -md5
  set -h
}

alias giturl="git config --get remote.origin.url"
